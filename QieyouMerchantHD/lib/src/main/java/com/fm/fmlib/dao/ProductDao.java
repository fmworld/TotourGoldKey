package com.fm.fmlib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.fm.fmlib.dao.Product;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCT.
*/
public class ProductDao extends AbstractDao<Product, Void> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Product_id = new Property(0, String.class, "product_id", false, "PRODUCT_ID");
        public final static Property Agent = new Property(1, String.class, "agent", false, "AGENT");
        public final static Property Bdgps = new Property(2, String.class, "bdgps", false, "BDGPS");
        public final static Property Bought_count = new Property(3, String.class, "bought_count", false, "BOUGHT_COUNT");
        public final static Property Category = new Property(4, String.class, "category", false, "CATEGORY");
        public final static Property Category_id = new Property(5, String.class, "category_id", false, "CATEGORY_ID");
        public final static Property Comments = new Property(6, String.class, "comments", false, "COMMENTS");
        public final static Property Content = new Property(7, String.class, "content", false, "CONTENT");
        public final static Property Lat = new Property(8, String.class, "lat", false, "LAT");
        public final static Property Lon = new Property(9, String.class, "lon", false, "LON");
        public final static Property Old_price = new Property(10, String.class, "old_price", false, "OLD_PRICE");
        public final static Property On_shelves = new Property(11, String.class, "on_shelves", false, "ON_SHELVES");
        public final static Property Price = new Property(12, String.class, "price", false, "PRICE");
        public final static Property Score = new Property(13, String.class, "score", false, "SCORE");
        public final static Property Product_name = new Property(14, String.class, "product_name", false, "PRODUCT_NAME");
        public final static Property State = new Property(15, String.class, "state", false, "STATE");
        public final static Property Shelf_count = new Property(16, String.class, "shelf_count", false, "SHELF_COUNT");
        public final static Property Thumb = new Property(17, String.class, "thumb", false, "THUMB");
        public final static Property Quantity = new Property(18, String.class, "quantity", false, "QUANTITY");
        public final static Property Tuan_end_time = new Property(19, String.class, "tuan_end_time", false, "TUAN_END_TIME");
    };


    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCT' (" + //
                "'PRODUCT_ID' TEXT NOT NULL ," + // 0: product_id
                "'AGENT' TEXT," + // 1: agent
                "'BDGPS' TEXT," + // 2: bdgps
                "'BOUGHT_COUNT' TEXT," + // 3: bought_count
                "'CATEGORY' TEXT," + // 4: category
                "'CATEGORY_ID' TEXT," + // 5: category_id
                "'COMMENTS' TEXT," + // 6: comments
                "'CONTENT' TEXT," + // 7: content
                "'LAT' TEXT," + // 8: lat
                "'LON' TEXT," + // 9: lon
                "'OLD_PRICE' TEXT," + // 10: old_price
                "'ON_SHELVES' TEXT," + // 11: on_shelves
                "'PRICE' TEXT," + // 12: price
                "'SCORE' TEXT," + // 13: score
                "'PRODUCT_NAME' TEXT," + // 14: product_name
                "'STATE' TEXT," + // 15: state
                "'SHELF_COUNT' TEXT," + // 16: shelf_count
                "'THUMB' TEXT," + // 17: thumb
                "'QUANTITY' TEXT," + // 18: quantity
                "'TUAN_END_TIME' TEXT);"); // 19: tuan_end_time
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getProduct_id());
 
        String agent = entity.getAgent();
        if (agent != null) {
            stmt.bindString(2, agent);
        }
 
        String bdgps = entity.getBdgps();
        if (bdgps != null) {
            stmt.bindString(3, bdgps);
        }
 
        String bought_count = entity.getBought_count();
        if (bought_count != null) {
            stmt.bindString(4, bought_count);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(5, category);
        }
 
        String category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindString(6, category_id);
        }
 
        String comments = entity.getComments();
        if (comments != null) {
            stmt.bindString(7, comments);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
 
        String lat = entity.getLat();
        if (lat != null) {
            stmt.bindString(9, lat);
        }
 
        String lon = entity.getLon();
        if (lon != null) {
            stmt.bindString(10, lon);
        }
 
        String old_price = entity.getOld_price();
        if (old_price != null) {
            stmt.bindString(11, old_price);
        }
 
        String on_shelves = entity.getOn_shelves();
        if (on_shelves != null) {
            stmt.bindString(12, on_shelves);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(13, price);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(14, score);
        }
 
        String product_name = entity.getProduct_name();
        if (product_name != null) {
            stmt.bindString(15, product_name);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(16, state);
        }
 
        String shelf_count = entity.getShelf_count();
        if (shelf_count != null) {
            stmt.bindString(17, shelf_count);
        }
 
        String thumb = entity.getThumb();
        if (thumb != null) {
            stmt.bindString(18, thumb);
        }
 
        String quantity = entity.getQuantity();
        if (quantity != null) {
            stmt.bindString(19, quantity);
        }
 
        String tuan_end_time = entity.getTuan_end_time();
        if (tuan_end_time != null) {
            stmt.bindString(20, tuan_end_time);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.getString(offset + 0), // product_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // agent
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bdgps
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bought_count
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // category
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // category_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // comments
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // content
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lat
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lon
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // old_price
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // on_shelves
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // price
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // score
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // product_name
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // state
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // shelf_count
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // thumb
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // quantity
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // tuan_end_time
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setProduct_id(cursor.getString(offset + 0));
        entity.setAgent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBdgps(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBought_count(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCategory(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCategory_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setComments(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLat(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLon(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOld_price(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOn_shelves(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPrice(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setScore(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setProduct_name(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setState(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setShelf_count(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setThumb(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setQuantity(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTuan_end_time(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Product entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Product entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
