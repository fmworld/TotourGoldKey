package com.fm.fmlib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.fm.fmlib.dao.LocalList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOCAL_LIST.
*/
public class LocalListDao extends AbstractDao<LocalList, Void> {

    public static final String TABLENAME = "LOCAL_LIST";

    /**
     * Properties of entity LocalList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Dest_id = new Property(0, String.class, "dest_id", false, "DEST_ID");
        public final static Property Local_id = new Property(1, String.class, "local_id", false, "LOCAL_ID");
        public final static Property Local_name = new Property(2, String.class, "local_name", false, "LOCAL_NAME");
    };


    public LocalListDao(DaoConfig config) {
        super(config);
    }
    
    public LocalListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOCAL_LIST' (" + //
                "'DEST_ID' TEXT NOT NULL ," + // 0: dest_id
                "'LOCAL_ID' TEXT NOT NULL ," + // 1: local_id
                "'LOCAL_NAME' TEXT NOT NULL );"); // 2: local_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOCAL_LIST'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LocalList entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getDest_id());
        stmt.bindString(2, entity.getLocal_id());
        stmt.bindString(3, entity.getLocal_name());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public LocalList readEntity(Cursor cursor, int offset) {
        LocalList entity = new LocalList( //
            cursor.getString(offset + 0), // dest_id
            cursor.getString(offset + 1), // local_id
            cursor.getString(offset + 2) // local_name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LocalList entity, int offset) {
        entity.setDest_id(cursor.getString(offset + 0));
        entity.setLocal_id(cursor.getString(offset + 1));
        entity.setLocal_name(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(LocalList entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(LocalList entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
