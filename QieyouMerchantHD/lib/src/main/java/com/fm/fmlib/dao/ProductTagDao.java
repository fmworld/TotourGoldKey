package com.fm.fmlib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.fm.fmlib.dao.ProductTag;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCT_TAG.
*/
public class ProductTagDao extends AbstractDao<ProductTag, Long> {

    public static final String TABLENAME = "PRODUCT_TAG";

    /**
     * Properties of entity ProductTag.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Tag_id = new Property(0, String.class, "tag_id", false, "TAG_ID");
        public final static Property Tag_name = new Property(1, String.class, "tag_name", false, "TAG_NAME");
        public final static Property Item_count = new Property(2, String.class, "item_count", false, "ITEM_COUNT");
        public final static Property Item_seq = new Property(3, String.class, "item_seq", false, "ITEM_SEQ");
        public final static Property Tag_seq = new Property(4, String.class, "tag_seq", false, "TAG_SEQ");
        public final static Property Id = new Property(5, Long.class, "id", true, "_id");
    };


    public ProductTagDao(DaoConfig config) {
        super(config);
    }
    
    public ProductTagDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCT_TAG' (" + //
                "'TAG_ID' TEXT NOT NULL ," + // 0: tag_id
                "'TAG_NAME' TEXT NOT NULL ," + // 1: tag_name
                "'ITEM_COUNT' TEXT," + // 2: item_count
                "'ITEM_SEQ' TEXT," + // 3: item_seq
                "'TAG_SEQ' TEXT," + // 4: tag_seq
                "'_id' INTEGER PRIMARY KEY );"); // 5: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCT_TAG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProductTag entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getTag_id());
        stmt.bindString(2, entity.getTag_name());
 
        String item_count = entity.getItem_count();
        if (item_count != null) {
            stmt.bindString(3, item_count);
        }
 
        String item_seq = entity.getItem_seq();
        if (item_seq != null) {
            stmt.bindString(4, item_seq);
        }
 
        String tag_seq = entity.getTag_seq();
        if (tag_seq != null) {
            stmt.bindString(5, tag_seq);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(6, id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5);
    }    

    /** @inheritdoc */
    @Override
    public ProductTag readEntity(Cursor cursor, int offset) {
        ProductTag entity = new ProductTag( //
            cursor.getString(offset + 0), // tag_id
            cursor.getString(offset + 1), // tag_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // item_count
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // item_seq
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tag_seq
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProductTag entity, int offset) {
        entity.setTag_id(cursor.getString(offset + 0));
        entity.setTag_name(cursor.getString(offset + 1));
        entity.setItem_count(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setItem_seq(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTag_seq(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ProductTag entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ProductTag entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
