package com.fm.fmlib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.fm.fmlib.dao.CategoryList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CATEGORY_LIST.
*/
public class CategoryListDao extends AbstractDao<CategoryList, Void> {

    public static final String TABLENAME = "CATEGORY_LIST";

    /**
     * Properties of entity CategoryList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Category = new Property(0, String.class, "category", false, "CATEGORY");
        public final static Property Category_id = new Property(1, String.class, "category_id", false, "CATEGORY_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
    };


    public CategoryListDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CATEGORY_LIST' (" + //
                "'CATEGORY' TEXT NOT NULL ," + // 0: category
                "'CATEGORY_ID' TEXT NOT NULL ," + // 1: category_id
                "'NAME' TEXT NOT NULL );"); // 2: name
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CATEGORY_LIST'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CategoryList entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCategory());
        stmt.bindString(2, entity.getCategory_id());
        stmt.bindString(3, entity.getName());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public CategoryList readEntity(Cursor cursor, int offset) {
        CategoryList entity = new CategoryList( //
            cursor.getString(offset + 0), // category
            cursor.getString(offset + 1), // category_id
            cursor.getString(offset + 2) // name
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CategoryList entity, int offset) {
        entity.setCategory(cursor.getString(offset + 0));
        entity.setCategory_id(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(CategoryList entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(CategoryList entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
