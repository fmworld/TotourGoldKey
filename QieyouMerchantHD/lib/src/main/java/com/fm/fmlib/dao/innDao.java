package com.fm.fmlib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.fm.fmlib.dao.inn;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table INN.
*/
public class innDao extends AbstractDao<inn, Long> {

    public static final String TABLENAME = "INN";

    /**
     * Properties of entity inn.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property InnId = new Property(0, String.class, "innId", false, "INN_ID");
        public final static Property InnerContact = new Property(1, String.class, "innerContact", false, "INNER_CONTACT");
        public final static Property InnerHead = new Property(2, String.class, "innerHead", false, "INNER_HEAD");
        public final static Property InnerIdentify = new Property(3, String.class, "innerIdentify", false, "INNER_IDENTIFY");
        public final static Property InnerMoblie = new Property(4, String.class, "innerMoblie", false, "INNER_MOBLIE");
        public final static Property InnerScore = new Property(5, String.class, "innerScore", false, "INNER_SCORE");
        public final static Property InnerServe = new Property(6, String.class, "innerServe", false, "INNER_SERVE");
        public final static Property InnerTodayServe = new Property(7, String.class, "innerTodayServe", false, "INNER_TODAY_SERVE");
        public final static Property InnHead = new Property(8, String.class, "innHead", false, "INN_HEAD");
        public final static Property InnProducts = new Property(9, String.class, "innProducts", false, "INN_PRODUCTS");
        public final static Property InnName = new Property(10, String.class, "innName", false, "INN_NAME");
        public final static Property Id = new Property(11, Long.class, "id", true, "_id");
    };


    public innDao(DaoConfig config) {
        super(config);
    }
    
    public innDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'INN' (" + //
                "'INN_ID' TEXT," + // 0: innId
                "'INNER_CONTACT' TEXT," + // 1: innerContact
                "'INNER_HEAD' TEXT," + // 2: innerHead
                "'INNER_IDENTIFY' TEXT," + // 3: innerIdentify
                "'INNER_MOBLIE' TEXT," + // 4: innerMoblie
                "'INNER_SCORE' TEXT," + // 5: innerScore
                "'INNER_SERVE' TEXT," + // 6: innerServe
                "'INNER_TODAY_SERVE' TEXT," + // 7: innerTodayServe
                "'INN_HEAD' TEXT," + // 8: innHead
                "'INN_PRODUCTS' TEXT," + // 9: innProducts
                "'INN_NAME' TEXT," + // 10: innName
                "'_id' INTEGER PRIMARY KEY );"); // 11: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'INN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, inn entity) {
        stmt.clearBindings();
 
        String innId = entity.getInnId();
        if (innId != null) {
            stmt.bindString(1, innId);
        }
 
        String innerContact = entity.getInnerContact();
        if (innerContact != null) {
            stmt.bindString(2, innerContact);
        }
 
        String innerHead = entity.getInnerHead();
        if (innerHead != null) {
            stmt.bindString(3, innerHead);
        }
 
        String innerIdentify = entity.getInnerIdentify();
        if (innerIdentify != null) {
            stmt.bindString(4, innerIdentify);
        }
 
        String innerMoblie = entity.getInnerMoblie();
        if (innerMoblie != null) {
            stmt.bindString(5, innerMoblie);
        }
 
        String innerScore = entity.getInnerScore();
        if (innerScore != null) {
            stmt.bindString(6, innerScore);
        }
 
        String innerServe = entity.getInnerServe();
        if (innerServe != null) {
            stmt.bindString(7, innerServe);
        }
 
        String innerTodayServe = entity.getInnerTodayServe();
        if (innerTodayServe != null) {
            stmt.bindString(8, innerTodayServe);
        }
 
        String innHead = entity.getInnHead();
        if (innHead != null) {
            stmt.bindString(9, innHead);
        }
 
        String innProducts = entity.getInnProducts();
        if (innProducts != null) {
            stmt.bindString(10, innProducts);
        }
 
        String innName = entity.getInnName();
        if (innName != null) {
            stmt.bindString(11, innName);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(12, id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11);
    }    

    /** @inheritdoc */
    @Override
    public inn readEntity(Cursor cursor, int offset) {
        inn entity = new inn( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // innId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // innerContact
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // innerHead
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // innerIdentify
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // innerMoblie
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // innerScore
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // innerServe
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // innerTodayServe
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // innHead
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // innProducts
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // innName
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, inn entity, int offset) {
        entity.setInnId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setInnerContact(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setInnerHead(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setInnerIdentify(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInnerMoblie(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInnerScore(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInnerServe(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInnerTodayServe(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setInnHead(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setInnProducts(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setInnName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(inn entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(inn entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
