package com.fm.fmlib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.fm.fmlib.dao.LaunchProfile;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LAUNCH_PROFILE.
*/
public class LaunchProfileDao extends AbstractDao<LaunchProfile, Void> {

    public static final String TABLENAME = "LAUNCH_PROFILE";

    /**
     * Properties of entity LaunchProfile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Img = new Property(0, String.class, "img", false, "IMG");
        public final static Property Link = new Property(1, String.class, "link", false, "LINK");
        public final static Property Tag = new Property(2, String.class, "tag", false, "TAG");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
    };


    public LaunchProfileDao(DaoConfig config) {
        super(config);
    }
    
    public LaunchProfileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LAUNCH_PROFILE' (" + //
                "'IMG' TEXT NOT NULL ," + // 0: img
                "'LINK' TEXT," + // 1: link
                "'TAG' TEXT," + // 2: tag
                "'TYPE' TEXT);"); // 3: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LAUNCH_PROFILE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LaunchProfile entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getImg());
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(2, link);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(3, tag);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public LaunchProfile readEntity(Cursor cursor, int offset) {
        LaunchProfile entity = new LaunchProfile( //
            cursor.getString(offset + 0), // img
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // link
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tag
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LaunchProfile entity, int offset) {
        entity.setImg(cursor.getString(offset + 0));
        entity.setLink(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTag(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(LaunchProfile entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(LaunchProfile entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
